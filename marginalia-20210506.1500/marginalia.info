This is marginalia.info, produced by makeinfo version 6.7 from
marginalia.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Marginalia: (marginalia). Marginalia in the minibuffer.
END-INFO-DIR-ENTRY


File: marginalia.info,  Node: Top,  Next: Introduction,  Up: (dir)

marginalia.el - Marginalia in the minibuffer
********************************************

* Menu:

* Introduction::
* Configuration::
* Using builtin or lightweight annotators::
* Contributions::


File: marginalia.info,  Node: Introduction,  Next: Configuration,  Prev: Top,  Up: Top

1 Introduction
**************

This package provides ‘marginalia-mode’ which adds marginalia to the
minibuffer completions.  Marginalia
(https://en.wikipedia.org/wiki/Marginalia) are marks or annotations
placed at the margin of the page of a book or in this case helpful
colorful annotations placed at the margin of the minibuffer for your
completion candidates.  Marginalia can only add annotations to be
displayed with the completion candidates.  It cannot modify the
appearance of the candidates themselves, which are shown as supplied by
the original commands.

   The annotations are added based on the completion category.  For
example ‘find-file’ reports the ‘file’ category and ‘M-x’ reports the
‘command’ category.  You can cycle between more or less detailed
annotators with the command ‘marginalia-cycle’.

   Since many commands do not report a completion category themselves,
Marginalia provides a classifier system, which tries to guess the
correct category based for example on the prompt (see the variable
‘marginalia-prompt-categories’).  Usually these heuristic classifiers
work well, but if they do not there is always the possibility to
overwrite categories by command name.  This way you can associate a
fixed category with the completion initiated by the command (see the
variable ‘marginalia-command-categories’).  The list of available
classifiers is specified by the variable ‘marginalia-classifiers’.


File: marginalia.info,  Node: Configuration,  Next: Using builtin or lightweight annotators,  Prev: Introduction,  Up: Top

2 Configuration
***************

It is recommended to use Marginalia together with either the Selectrum
(https://github.com/raxod502/selectrum), Vertico
(https://github.com/minad/vertico) or the Icomplete-vertical
(https://github.com/oantolin/icomplete-vertical) completion system.
Furthermore Marginalia can be combined with Embark
(https://github.com/oantolin/embark) for action support and Consult
(https://github.com/minad/consult), which provides many useful commands.

     ;; Enable richer annotations using the Marginalia package
     (use-package marginalia
       ;; Either bind `marginalia-cycle` globally or only in the minibuffer
       :bind (("M-A" . marginalia-cycle)
              :map minibuffer-local-map
              ("M-A" . marginalia-cycle))

       ;; The :init configuration is always executed (Not lazy!)
       :init

       ;; Must be in the :init section of use-package such that the mode gets
       ;; enabled right away. Note that this forces loading the package.
       (marginalia-mode))


File: marginalia.info,  Node: Using builtin or lightweight annotators,  Next: Contributions,  Prev: Configuration,  Up: Top

3 Using builtin or lightweight annotators
*****************************************

Marginalia activates rich annotators by default.  Depending on your
preference you may want to use the builtin annotators or even no
annotators by default and only activate the annotators on demand by
invoking ‘marginalia-cycle’.

   In order to use the builtin annotators by default, you can use the
following command.  Replace ‘builtin’ by ‘none’ to disable annotators by
default.

     (defun marginalia-use-builtin ()
       (interactive)
       (mapc
        (lambda (x)
          (setcdr x (cons 'builtin (delq 'builtin (cdr x)))))
        marginalia-annotator-registry))

   If a completion category supports two annotators, you can toggle
between those using this command.

     (defun marginalia-toggle ()
       (interactive)
       (mapc
        (lambda (x)
          (setcdr x (append (nreverse (delq 'none
                                            (delq 'builtin (cdr x))))
                            '(builtin none))))
        marginalia-annotator-registry))

   After cycling the annotators you may want to automatically save the
configuration.  This can be achieved using an advice which calls
‘customize-save-variable’.

     (advice-add #'marginalia-cycle :after
                 (lambda ()
                   (let ((inhibit-message t))
                     (customize-save-variable 'marginalia-annotator-registry
                                              marginalia-annotator-registry))))


File: marginalia.info,  Node: Contributions,  Prev: Using builtin or lightweight annotators,  Up: Top

4 Contributions
***************

Since it is planned to submit this package to GNU ELPA, contributions
require a copyright assignment to the FSF.



Tag Table:
Node: Top203
Node: Introduction471
Node: Configuration2025
Node: Using builtin or lightweight annotators3175
Node: Contributions4819

End Tag Table


Local Variables:
coding: utf-8
End:
